pd_mean2 <- rep(0,length(ds))
for(r in 1:length(pd_mean)){ #1 for loop
pd_mean[r] <- diffusion(dts[r],10,10^-6)
message(pd_mean[r])
}
for(r in 1:length(pd_mean)){ #1 for loop
pd_mean[r] <- diffusion(dts[r],0.5,10^-6)
message(pd_mean[r])
}
for(r in 1:length(pd_mean2)){ #2 for loop
pd_mean2[r] <- diffusion(1e-4,10,ds[r])
message(pd_mean2[r])
}
#3 Run lines below until #4
library(ggplot2)
dts.data <- data.frame( #dts vs. pd_mean data frame
dts, pd_mean
)
ggplot(dts.data, aes(dts, pd_mean)) + geom_point()
ggplot(dts.data, aes(dts, pd_mean)) + geom_point()+scale_x_continuous(trans="log10")
dts <- lseq(1e-10,1e-1,10) #1 variables
pd_mean <- rep(0,length(dts))
ds <- lseq(1e-12,1e-2,6) #2 variables
pd_mean2 <- rep(0,length(ds))
for(r in 1:length(pd_mean)){ #1 for loop
pd_mean[r] <- diffusion(dts[r],0.5,10^-6)
message(pd_mean[r])
}
#1 Run lines below until #3
rm(list = ls())
library(emdbook)
diffusion <- function(dt,total_time,D){
dots_x<-rep(0,100)   # Creates 100 molecules to follow (x component of position)
dots_y<-rep(0,100)   # Creates 100 molecules to follow (y component of position)
dist<-sqrt(2*D*dt)   # Calculates the root mean squared distance that a molecule should travel based on D.
for(d in 1:(total_time/dt)){
if(d%%1000==0){message("Time: ",d*dt)}
distx<-rnorm(length(dots_x),mean=dist,sd=0.341*dist) # Do not change this line
disty<-rnorm(length(dots_y),mean=dist,sd=0.341*dist) # Do not change this line
anglex<-sample(seq(0,2*pi,by=0.001*pi),length(dots_x),replace=TRUE) # Do not change this line
angley<-sample(seq(0,2*pi,by=0.001*pi),length(dots_y),replace=TRUE) # Do not change this line
dots_x<-dots_x+distx*cos(anglex)   # Moves the molecules (x component)
dots_y<-dots_y+disty*sin(angley)   # Moves the molecules (y component)
}
pd <- sqrt((dots_x)^2+(dots_y)^2)
pd_mean <- mean(pd)
return(pd_mean)
}
dts <- lseq(1e-10,1e-1,10) #1 variables
pd_mean <- rep(0,length(dts))
ds <- lseq(1e-12,1e-2,6) #2 variables
pd_mean2 <- rep(0,length(ds))
for(r in 1:length(pd_mean)){ #1 for loop
pd_mean[r] <- diffusion(dts[r],0.5,10^-6)
message(pd_mean[r])
}
#1 Run lines below until #3
rm(list = ls())
library(emdbook)
diffusion <- function(dt,total_time,D){
dots_x<-rep(0,100)   # Creates 100 molecules to follow (x component of position)
dots_y<-rep(0,100)   # Creates 100 molecules to follow (y component of position)
dist<-sqrt(2*D*dt)   # Calculates the root mean squared distance that a molecule should travel based on D.
for(d in 1:(total_time/dt)){
if(d%%1000==0){message("Time: ",d*dt)}
distx<-rnorm(length(dots_x),mean=dist,sd=0.341*dist) # Do not change this line
disty<-rnorm(length(dots_y),mean=dist,sd=0.341*dist) # Do not change this line
anglex<-sample(seq(0,2*pi,by=0.001*pi),length(dots_x),replace=TRUE) # Do not change this line
angley<-sample(seq(0,2*pi,by=0.001*pi),length(dots_y),replace=TRUE) # Do not change this line
dots_x<-dots_x+distx*cos(anglex)   # Moves the molecules (x component)
dots_y<-dots_y+disty*sin(angley)   # Moves the molecules (y component)
}
pd <- sqrt((dots_x)^2+(dots_y)^2)
pd_mean <- mean(pd)
return(pd_mean)
}
dts <- lseq(1e-10,1e-1,10) #1 variables
pd_mean <- rep(0,length(dts))
ds <- lseq(1e-12,1e-2,6) #2 variables
pd_mean2 <- rep(0,length(ds))
for(r in 1:length(pd_mean)){ #1 for loop
pd_mean[r] <- diffusion(dts[r],0.5,10^-6)
message(pd_mean[r])
}
0.1/1e-10
dts <- lseq(1e-8,1e-1,10) #1 variables
pd_mean <- rep(0,length(dts))
for(r in 1:length(pd_mean)){ #1 for loop
pd_mean[r] <- diffusion(dts[r],0.1,10^-6)
message(pd_mean[r])
}
rm(list = ls())
library(emdbook)
diffusion <- function(dt,total_time,D){
dots_x<-rep(0,10000)   # Creates 100 molecules to follow (x component of position)
dots_y<-rep(0,10000)   # Creates 100 molecules to follow (y component of position)
dist<-sqrt(2*D*dt)   # Calculates the root mean squared distance that a molecule should travel based on D.
for(d in 1:(total_time/dt)){
if(d%%1000==0){message("Time: ",d*dt)}
distx<-rnorm(length(dots_x),mean=dist,sd=0.341*dist) # Do not change this line
disty<-rnorm(length(dots_y),mean=dist,sd=0.341*dist) # Do not change this line
anglex<-sample(seq(0,2*pi,by=0.001*pi),length(dots_x),replace=TRUE) # Do not change this line
angley<-sample(seq(0,2*pi,by=0.001*pi),length(dots_y),replace=TRUE) # Do not change this line
dots_x<-dots_x+distx*cos(anglex)   # Moves the molecules (x component)
dots_y<-dots_y+disty*sin(angley)   # Moves the molecules (y component)
}
pd <- sqrt((dots_x)^2+(dots_y)^2)
pd_mean <- mean(pd)
return(pd_mean)
}
dts <- lseq(1e-8,1e-1,10) #1 variables
pd_mean <- rep(0,length(dts))
ds <- lseq(1e-12,1e-2,6) #2 variables
pd_mean2 <- rep(0,length(ds))
for(r in 1:length(pd_mean)){ #1 for loop
pd_mean[r] <- diffusion(dts[r],0.1,10^-6)
message(pd_mean[r])
}
dts <- lseq(1e-6,1e-1,10) #1 variables
pd_mean <- rep(0,length(dts))
ds <- lseq(1e-12,1e-2,6) #2 variables
pd_mean2 <- rep(0,length(ds))
for(r in 1:length(pd_mean)){ #1 for loop
pd_mean[r] <- diffusion(dts[r],0.1,10^-6)
message(pd_mean[r])
}
dts.data <- data.frame( #dts vs. pd_mean data frame
dts, pd_mean
)
ggplot(dts.data, aes(dts, pd_mean)) + geom_point()+scale_x_continuous(trans="log10")
library(ggplot2)
dts.data <- data.frame( #dts vs. pd_mean data frame
dts, pd_mean
)
ggplot(dts.data, aes(dts, pd_mean)) + geom_point()+scale_x_continuous(trans="log10")
rm(list=ls())
conf.interval<-function(datablob,alpha){
me<-qt(((1-alpha)/2),(length(datablob)-1))*sd(datablob)/sqrt(length(datablob))
message("Confidence at ",alpha," of mean ",signif(mean(datablob),3)," is: ",signif(mean(datablob)-abs(me),3),",",signif(mean(datablob)+abs(me),3))
return(abs(me))
}
# Repeated analysis with different wings, same species (Species variation)
piranga.speciesvar.data<-read.csv(file.choose())  #choose the file: allidealaoa_data_"date".csv
piranga.speciesvar.data$species<-as.factor(piranga.speciesvar.data$species)
# Repeated analysis with same wing (Modeling error)
piranga.modelerror.data<-read.csv(file.choose())  #choose the file: allidealaoa_data_"date".csv
piranga.modelerror.data$species<-as.factor(piranga.modelerror.data$species)
x<-c("maxCLCD","maxCL","idealAOA","Efficiency","Gamma10")
piranga.modelerror.me<-rep(NA,length(x))
piranga.speciesvar.me<-rep(NA,length(x))
name1<-rep(NA,length(x))
name2<-rep(NA,length(x))
for (i in 1:length(x)){
message(x[i])
name1[i]<-paste("piranga.modelerror.data$",x[i],sep="")
name2[i]<-paste("piranga.speciesvar.data$",x[i],sep="")
piranga.modelerror.me[i]<-conf.interval(eval(parse(text=name1[i])),0.9)
piranga.speciesvar.me[i]<-conf.interval(eval(parse(text=name2[i])),0.9)
message(piranga.speciesvar.me[i]/piranga.modelerror.me[i])
}
# Repeated analysis with different wings, same species (Species variation)
accipiter.speciesvar.data<-read.csv(file.choose())  #choose the file: allidealaoa_data_"date".csv
accipiter.speciesvar.data$species<-as.factor(accipiter.speciesvar.data$species)
# Repeated analysis with same wing (Modeling error)
accipiter.modelerror.data<-read.csv(file.choose())  #choose the file: allidealaoa_data_"date".csv
accipiter.modelerror.data$species<-as.factor(accipiter.modelerror.data$species)
x<-c("maxCLCD","maxCL","idealAOA","Efficiency","Gamma10")
accipiter.modelerror.me<-rep(NA,length(x))
accipiter.speciesvar.me<-rep(NA,length(x))
name1<-rep(NA,length(x))
name2<-rep(NA,length(x))
for (i in 1:length(x)){
message(x[i])
name1[i]<-paste("accipiter.modelerror.data$",x[i],sep="")
name2[i]<-paste("accipiter.speciesvar.data$",x[i],sep="")
accipiter.modelerror.me[i]<-conf.interval(eval(parse(text=name1[i])),0.9)
accipiter.speciesvar.me[i]<-conf.interval(eval(parse(text=name2[i])),0.9)
message(accipiter.speciesvar.me[i]/accipiter.modelerror.me[i])
}
species<-c(rep("Piranga",2*length(x)),rep("Accipiter",2*length(x)))
type<-c(rep(c("model"),length(x)),rep(c("var"),length(x)),rep(c("model"),length(x)),rep(c("var"),length(x)))
measurement<-rep(x,4)
value<-c(piranga.modelerror.me,piranga.speciesvar.me,accipiter.modelerror.me,accipiter.speciesvar.me)
me.data<-data.frame(species,type,measurement,value)
ggplot(me.data,aes(measurement,value,color=type,shape=as.factor(species)))+geom_point(size=6)
library(ggplot2)
ggplot(me.data,aes(measurement,value,color=type,shape=as.factor(species)))+geom_point(size=6)
me.data$species<-as.factor(me.data$species)
ggplot(me.data,aes(measurement,value,color=type,shape=species))+geom_point(size=6)
#exercise 13.1
library(stringr)
data(hafu, package = "learningr")#install learningr before opening
hafu$FathersNationalityIsUncertain <- str_detect(hafu$Father, fixed("?"))
hafu$MothersNationalityIsUncertain <- str_detect(hafu$Mother, fixed("?"))
#identifies question marks in the dataset
hafu$Father<-str_replace(hafu$Father, fixed("?"),"") #removes question marks
hafu$Mother<-str_replace(hafu$Mother, fixed("?"), "")
install.packages("reshape2")#must install reshape2 package before
hafu_long<- melt(hafu, measure.vars=c("Mother","Father")) #makes the columns wider
library(reshape2)
hafu_long<- melt(hafu, measure.vars=c("Mother","Father")) #makes the columns wider
#use base r
top10<-function(x){
counts<-table(x, useNA="always")
head(sort(counts,decreasing=TRUE), 10)
} #finds top 10 repeated values
top10(hafu$Mother) #example of the use of the function- can be with any of the variables
install.packages(plyr)#install package which can make the function easier
install.packages("plyr")#install package which can make the function easier
install.packages("plyr")
library(plyr)
top10_v2<-function(y){
counts<-count(y)
head(arrange(counts,desc(freq)), 10)
}
top10_v2<-function(y){
counts<-count(y)
head(arrange(counts,desc(freq)), 10)
}
top10_v2(hafu$Mother)
#--------Exercise 13.1--------#
# Question 1
library(stringr)
library(learningr)
data(hafu, package = "learningr")
hafu$FathersNationalityIsUncertain <- str_detect(hafu$Father, fixed("?"))
hafu$MothersNationalityIsUncertain <- str_detect(hafu$Mother, fixed("?"))
# Question 2
hafu$Father <- str_replace(hafu$Father, fixed("?"), "")
hafu$Mother <- str_replace(hafu$Mother, fixed("?"), "")
#--------Exercise 13.2--------#
install.packages("reshape2")
library(reshape2)
hafu_long <- melt(hafu, measure.vars = c("Father", "Mother"))
top10 <- function(x) {
counts <- table(x, useNA = "always")
head(sort(counts, decreasing = TRUE), 10)
}
top10(hafu$Mother)
# EXERCISE 13-1
library(stringr)
data(hafu, package = "learningr")
hafu$FathersNationalityIsUncertain <- str_detect(hafu$Father, fixed("?"))
hafu$MothersNationalityIsUncertain <- str_detect(hafu$Mother, fixed("?"))
hafu$Father <- str_replace(hafu$Father, fixed("?"), "")
hafu$Mother <- str_replace(hafu$Mother, fixed("?"), "")
hafu_long <- melt(hafu, measure.vars = c("Father", "Mother"))
# EXERCISE 13-3
top10 <- function(x)
{
counts <- table(x, useNA = "always")
head(sort(counts, decreasing = TRUE), 10)
}
top10(hafu$Mother)
View(top10_v2)
# EXERCISE 13-1
library(stringr)
data(hafu, package = "learningr")
hafu$FathersNationalityIsUncertain <- str_detect(hafu$Father, fixed("?"))
hafu$MothersNationalityIsUncertain <- str_detect(hafu$Mother, fixed("?"))
hafu$Father <- str_replace(hafu$Father, fixed("?"), "")
hafu$Mother <- str_replace(hafu$Mother, fixed("?"), "")
# EXERCISE 13-2
hafu_long <- melt(hafu, measure.vars = c("Father", "Mother"))
# EXERCISE 13-3
top10 <- function(x)
{
counts <- table(x, useNA = "always")
head(sort(counts, decreasing = TRUE), 10)
}
top10(hafu$Mother)
detach(stringr)
?detach
detach("stringr")
detach("package:stringr")
detach("package:learningr")
rm(list=ls())
#Tiffany Nguyen ID:2327233
library(stringr) #load library
data(hafu, package = "learningr") #load data inside a specific package
# Exercise 13-1
hafu$FathersNationalityIsUncertain <- str_detect(hafu$Father, fixed("?")) #creates a new column for the father to be true/false in terms of nationality
hafu$MothersNationalityIsUncertain <- str_detect(hafu$Mother, fixed("?")) #creates a new column for the mother to be true/false in terms of nationality
hafu$Father <- str_replace(hafu$Father, fixed("?"), "") #removes the question marks in the entries where nationality is unknown for fathers
hafu$Mother <- str_replace(hafu$Mother, fixed("?"), "") #removes the question marks in the entries where nationality is unknown for fathers
# Exercise 13-2
library(reshape2)
hafu_long <- melt(hafu, measure.vars = c("Father", "Mother")) #organizes the data by fathers first and then mothers
# Exercise 13-3
top10 <- function(x)
{
counts <- table(x, useNA = "always") #useNA = "always" includes NA in the counts vector
head(sort(counts, decreasing = TRUE), 10) #sorts the catergory from highest to lowest of 10 options
}
top10(hafu$Mother)
top10(hafu$Father)
top10(hafu$Hair)
detach("package:stringr")
detach("package:reshape2")
#10/24 Cleaning and Transforming Data Homework
#Exercise 1
data("hafu", package="learningr")
library(stringr) #opening string package
hafu$nationalityoffatherisuncertain<-str_detect(hafu$Father, fixed("?")) #detects the question mark in the father column
hafu$nationalityofmotherisuncertain<-str_detect(hafu$Mother,fixed("?")) #detects the question mark in the mother column
z
hafu$Father<-str_replace(hafu$Father,fixed("?"),"") #replace the question mark in this column
hafu$Mother<-str_replace(hafu$Mother,fixed("?"),"") #replace the question mark in this column
library(reshape2) #opening reshape2 package
hafu_long<-melt(hafu, measure.vars = c("Father","Mother"))
#converting from wide to long on father and mother column using melth function
#Exercise 2
library(reshape2) #opening reshape2 package
hafu_long<-melt(hafu, measure.vars = c("Father","Mother"))
#converting from wide to long on father and mother column using melth function
#Exercise 3
mostcommom10<-function(x) { #creating a function
counts<-table(x,useNA = "always") #creating a table for most common values
head(sort(counts,decreasing = TRUE), 10) #lets us find the most common values using sort and head together
}
mostcommom10(hafu$Father) #testing out on the father column
mostcommom10(hafu$Mother)#testing out on the mother column
detach("package:strinr")
detach("package:stringr")
detach("package:reshape2")
#Exercise 13-1
library(stringr)
data(hafu, package = "learningr")
#the new columns
hafu$FatherUncerta
#the new columns
hafu$FatherUncertain = str_detect(hafu$Father, fixed("?"))
hafu$MotherUncertain = str_detect(hafu$Mother, fixed("?"))
#now to replace the question marks
hafu$Father = str_replace(hafu$Father, fixed("?"), "")
hafu$Mother = str_replace(hafu$Mother, fixed("?"), "")
#Exercise 13-2
package(reshape2)
long_form_hafu = melt(hafu, measure.vars = c("Father", "Mother")) #simple use of reshape 2's melt() function
common10 = function(x) {
count = table(x, useNA = "always")
head(sort(count, decreasing = TRUE), 10)
}
common10(hafu$Mother)
library(ggplot2) #Open ggplot prior
#Complete the following exercises:
#QUESTION 1:
# Make modifications to the function craps game from Exercise 8-2 so that you can automatically play the game an arbitrary number of times at once and make a table of the roll number, the game status, and the point values as the results. Turn in the new code and the output table of results.
two_d6 <- function(n) {  #Assign the craps game a function
random_numbers <- matrix(
sample(6, 2 * n, replace = TRUE), nrow = 2
)
colSums(random_numbers)
}
d<-function(x) { #Create a new function to set the conditions
score <- two_d6(x)
game_status<-rep(0,x) #Set the score equal to the game status
point<- rep(0,x) #Make point = score
for(i in 1:x){
{
if(score[i] %in% c(2,3,11)) { #same if....
game_status[i] <- FALSE     #Then the game staus = FALSE
point[i] <- NA
} else if (score[i] %in% c(7,11)) { #Else if allows us to provide an extra - 7 or 11
game_status[i] <- TRUE  #Then if this else of the game status is true
point[i] <-NA   #The point is NA
} else { #Or if the score is any other arbitrary number besides the winners/losers
game_status[i] <- NA #Thus the game staus = NA
point[i] <-score[i] #The point = score
}
}
}
p<-data.frame(score, game_status,point) #making a data frame of score, game status point
return(p) #return p, the data frame
}
d(20) #Running game arbitrary amount of times
#QUESTION 2:
# Run your code from #1 for 10,000 games. What fraction of games did you 'win'? Make a graph of 'wins' versus 'loses' for these 10,000 games. You can plot either the fractions or the number of games, but be sure to label the axes appropriately!
craps<-d(10000) #10,000 games running
sum(craps$game_status, na.rm=TRUE) #Figuring out wins
b<-ggplot(craps, aes(game_status))+ geom_bar() #Graph wins v loses
b+labs(title="Winners over the Amount of Games run", x="Amount of Wins", y="Amount of games") #details to the graph like labeled axis and title
sea_shells <- c(
"She", "sells", "sea", "shells", "by", "the", "seashore",
"The", "shells", "she", "sells", "are", "surely", "seashells","So", "if",
"she", "sells", "shells", "on", "the", "seashore",
"I'm", "sure", "she", "sells", "seashore", "shells"
)
#Use nchar to calculate how many letters are in each word
nchar_sea_shells <- nchar(sea_shells)
#use max and min to show specifics don't use seq_along because that generates all indices
for(i in min(nchar_sea_shells):max(nchar_sea_shells)) {
message("These words have ", i, " letters:")
print(toString(unique(sea_shells[nchar_sea_shells == i]))) }
rm(list=ls())
detach("package:ggplot2")
library(ggplot2)
ggplot(melt(volcano), aes(x=X1, y=X2, fill=value)) + geom_tile()
library(reshape2)
library(ggplot2)
ggplot(melt(volcano), aes(x=X1, y=X2, fill=value)) + geom_tile()
View(volcano)
library(ggplot2)
ggplot(melt(volcano), aes(x=V1, y=V2, fill=value)) + geom_tile()
volcano2<-melt(volcano)
View(volcano2)
library(ggplot2)
ggplot(volcano2, aes(x=Var1, y=Var
2, fill=value)) + geom_tile()
library(ggplot2)
ggplot(volcano2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
install.packages(c("backports", "boot", "callr", "car", "classInt", "covr", "curl", "data.table", "devtools", "digest", "effects", "ellipsis", "foreign", "gdtools", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "KernSmooth", "knitr", "later", "learningr", "magick", "maptools", "mgcv", "nlme", "openxlsx", "pkgbuild", "pkgconfig", "promises", "purrr", "rgeos", "rgl", "rlang", "rmarkdown", "sf", "shiny", "sys", "tinytex", "units", "whisker", "xfun", "zip"))
library(ggplot2)
library(reshape2)
?heatmap
rm(list=ls())
setwd("~/Dropbox (Chapman)/wing_gPC/birdwingGPC")
parameters<-read.table("input_data_681.dat",header=FALSE)
names(parameters)<-c("AR","Camber","Re")
parameters$ARFac<-as.factor(parameters$AR)
levels.AR<-levels(parameters$ARFac)
parameters$CamberFac<-as.factor(parameters$Camber)
levels.Camber<-levels(parameters$CamberFac)
parameters$ReFac<-as.factor(parameters$Re)
levels.Re<-levels(parameters$ReFac)
summary(parameters)
calcAR<-function(AR.new,C){0.5*AR.new*C}
calcSpeeds<-function(Re,C,nu){(Re*nu)/C}
calcAR(as.numeric(as.character(levels.AR[1])),0.1)
nu=1.5e-05
calcSpeeds(as.numeric(as.character(levels.Re[1])),0.1,nu)
calcAR(10.098076,0.1)
parameters[parameters$Camber==levels.Camber[3],]
calcAR(10.985685,0.1)
parameters[parameters$Camber==levels.Camber[4],]
parameters[parameters$Camber==levels.Camber[4],]
calcAR(3.624887,0.1)
calcAR(4.014315,0.1)
calcAR(4.901924,0.1)
calcAR(.970085,0.1)
calcAR(5.970085,0.1)
calcAR(9.029915,0.1)
calcSpeeds(178586.68,0.1,nu)
calcAR(11.37511,0.1)
parameters[parameters$Camber==levels.Camber[5],]
calcAR(3.422191,0.1)
calcAR(5.076888,0.1)
calcAR(5.970085,0.1)
calcAR(9.923112,0.1)
calcAR(11.577809,0.1)
parameters[parameters$Camber==levels.Camber[6],]
levels.Camber[6]
parameters[parameters$Camber==levels.Camber[5],]
parameters[parameters$Camber==levels.Camber[6],]
parameters[parameters$Camber==levels.Camber[7],]
parameters[parameters$Camber==levels.Camber[8],]
calcAR(3.303887,0.1)
calcAR(4.524558,0.1)
calcAR(5.970085,0.1)
calcAR(6.426214,0.1)
calcAR(8.573786,0.1)
calcAR(10.475442,0.1)
calcAR(11.577809,0.1)
calcAR(11.696113,0.1)
parameters[parameters$Camber==levels.Camber[9],]
parameters[parameters$Camber==levels.Camber[10],]
parameters[parameters$CamberFac==levels.Camber[10],]
parameters[parameters$Camber==levels.Camber[9],]
parameters[parameters$CamberFac==levels.Camber[10],]
parameters[parameters$Camber==levels.Camber[11],]
nrow(parameters[parameters$Camber==levels.Camber[11],])
nrow(parameters[parameters$Camber==levels.Camber[9],])
nrow(parameters[parameters$Camber==levels.Camber[8],])
nrow(parameters[parameters$Camber==levels.Camber[12],])
nrow(parameters[parameters$Camber==levels.Camber[13],])
progress<-0
progress<-0
for(i in 1:10){
progress<-progress+nrow(parameters[parameters$Camber==levels.Camber[i],])
}
progress/681*100
parameters[parameters$Camber==levels.Camber[1],]
calcSpeeds(105000,0.1,nu)
parameters[parameters$Camber==levels.Camber[11],]
parameters[parameters$Camber==levels.Camber[10],]
parameters[parameters$Camber==levels.Camber[11],]
parameters[parameters$Camber==levels.Camber[11],]
nrow(parameters[parameters$Camber==levels.Camber[11],])
nrow(parameters[parameters$Camber==levels.Camber[12],])
parameters[parameters$Camber==levels.Camber[12],]
progress<-0
for(i in 1:12){
progress<-progress+nrow(parameters[parameters$Camber==levels.Camber[i],])
}
progress/681
nrow(parameters[parameters$Camber==levels.Camber[13],])
nrow(parameters[parameters$Camber==levels.Camber[14],])
nrow(parameters[parameters$Camber==levels.Camber[15],])
nrow(parameters[parameters$Camber==levels.Camber[16],])
nrow(parameters[parameters$Camber==levels.Camber[17],])
progress<-0
for(i in 1:13){
progress<-progress+nrow(parameters[parameters$Camber==levels.Camber[i],])
}
progress/681
calcAR(10.098076,0.1)
parameters[parameters$Camber==levels.Camber[13],]
progress<-0
for(i in 1:12){
progress<-progress+nrow(parameters[parameters$Camber==levels.Camber[i],])
}
progress/681
